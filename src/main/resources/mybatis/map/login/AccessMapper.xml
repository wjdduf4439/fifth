<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
                        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fifth.cms.mapper.login.AccessMapper">

	<resultMap id="AccessMap" type="com.fifth.cms.model.login.AccessVO">
        <id property="uid" column="uid"/>
		<result property="id" column="id"/>
		<result property="pw" column="pw"/>
		<result property="nick" column="nick"/>
		<result property="role" column="role"/>
		<result property="authority" column="authority"/>
		<result property="refreshToken" column="refreshToken"/>
		<result property="approve" column="approve"/>
    </resultMap>

	<!-- 사용자 목록 조회 -->
	<select id="selectAccessList" parameterType="HashMap" resultMap="AccessMap">
		select * FROM FIFTH_ACCESS
		WHERE 	1=1
		and		approve = #{ approve }
	</select>

	<!-- 사용자 접속 홈 정보 가져오기 -->
	<select id="loginHomeMapper" parameterType="String" resultMap="AccessMap">
		select * FROM FIFTH_ACCESS
	</select>

	<!-- 사용자 아이디 중복 체크 -->
	<select id="accIdCount" parameterType="String" resultType="int">
		select count(`code`)
		FROM FIFTH_ACCESS 
		WHERE id = #{ id }
		and approve = 'Y'
	</select>

	<!-- 사용자 정보 가져오기 > 관리자 메뉴의 사용자 정보 게시판에서 가져오는거라서 UID로 검색-->
	<select id="selectAccessOne" parameterType="String" resultMap="AccessMap">
		select *
		FROM FIFTH_ACCESS 
		WHERE 1 = 1
		and uid = #{ uid }
		<!-- <if test="id != null"> and id = #{ id } </if> -->
	</select>
	
	<!-- 인증된 사용자 정보 가져오기 -->
	<select id="selectAccessOneApproved" parameterType="String" resultMap="AccessMap">
		select *
		FROM FIFTH_ACCESS 
		WHERE id = #{ id }
		and approve = 'Y'
	</select>

	<!-- 사용자 정보 가져오기 -->
	<select id="selectAccessOneforUid" parameterType="String" resultMap="AccessMap">
		select *
		FROM FIFTH_ACCESS 
		WHERE accessCode = #{ accessCode }
		and approve = 'Y'
	</select>

	<!-- 사용자 접속여부 체크 -->
	<select id="checkAccess" parameterType="HashMap" resultType="int">
		select count(`uid`)
		FROM FIFTH_ACCESS 
		WHERE accessCode = #{ accessCode } and refreshToken = #{ refreshToken } and id = #{ accessId } and nick = #{ nick } and role = #{ role } and approve = 'Y'
	</select>

	<!-- 사용자 접속여부 체크 -->
	<select id="checkAdminOne" parameterType="HashMap" resultMap="AccessMap">
		select * 
		FROM FIFTH_ACCESS 
		WHERE accessCode = #{ accessCode } and refreshToken = #{ refreshToken } and authority = 'admin' and approve = 'Y'
	</select>

	<!-- 사용자 닉네임 중복 체크 -->
	<select id="checkNickName" parameterType="HashMap" resultMap="AccessMap">
		select * FROM FIFTH_ACCESS 
		WHERE nick = #{ nick } and approve = 'Y'
	</select>

	<!-- 사용자 이메일 중복 체크 -->
	<select id="checkEmail" parameterType="HashMap" resultMap="AccessMap">
		select * FROM FIFTH_ACCESS 
		WHERE email = #{ email } and approve = 'Y'
	</select>

	<!-- 사용자 정보 입력 -->
	<insert id="insertAccount" >
		 	
			INSERT INTO FIFTH_ACCESS (
				id
				,pw
				,nick
				,email
				,role
				,authority
				,approve
			) VALUES (
				#{ id }
				,#{ pw }
				,#{ nick }
				,#{ email }
				,#{ role }
				,#{ authority }
				,'N'
			)
			
			<selectKey resultType="String" keyProperty="uid" order="AFTER" >
				SELECT LAST_INSERT_ID() AS uid
			</selectKey>
	</insert>

	<!-- 사용자 접속 시 refreshToken 입력 -->
	<update id="updateRefreshToken" >
			UPDATE FIFTH_ACCESS SET
				refreshToken = #{ refreshToken }
			
			WHERE accessCode = #{ accessCode }
			and approve = 'Y'
	</update>

	<update id="updateApprove" >
		UPDATE FIFTH_ACCESS 
			SET approve = 'Y'
		WHERE uid in (
			<foreach collection="approveAccountList" item="item" separator=",">
				#{ item }
			</foreach>
		)
	</update>

	<update id="updateAccount" >
		UPDATE FIFTH_ACCESS SET
			id = #{ id }
			,nick = #{ nick }
			,email = #{ email }
			,role = #{ role }
			,authority = #{ authority }
			,approve = #{ approve }
		WHERE uid = #{ uid }
	</update>

	<!-- 사용자 접속 종료시 refreshToken 초기화 -->
	<update id="updateBlankRefreshToken" >	
			UPDATE FIFTH_ACCESS SET
				refreshToken = ''
			
			WHERE accessCode = #{ accessCode }
			and refreshToken = #{ refreshToken }
			and approve = 'Y'
	</update>

	<!-- 사용자 접속 코드 업데이트 -->
	<update id="updateAccessCode" >
		UPDATE FIFTH_ACCESS SET
			accessCode = #{ accessCode }
		WHERE uid = #{ uid }
	</update>

	<update id="disableApprove" >
		update FIFTH_ACCESS set
			approve = 'N'
		where uid = #{ uid }
	</update>

	<update id="deleteAccount" >
		delete from FIFTH_ACCESS
		where uid = #{ uid }
	</update>

</mapper>